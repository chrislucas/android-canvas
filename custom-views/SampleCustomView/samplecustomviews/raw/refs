Lista de componentes para estudar
https://developer.android.com/reference/android/widget/ViewSwitcher
https://developer.android.com/reference/android/widget/ImageSwitcher
https://developer.android.com/reference/android/widget/TextSwitcher
https://www.tutorialspoint.com/android/android_imageswitcher.htm
--------------------------------------------------------------------------------------------------------------------
Custom attr android
https://developer.android.com/training/custom-views/create-view

Exemplo de namespace para custrom attributes
xmlns:customAttr="http://schemas.android.com/apk/res-auto"

xmlns:customAttr ->

a diretiva xmlns permite ajuda a nao ter que repetir o namespace inteiro. Podemos definir qualquer "alias"
(apelido) para a namespace http://schemas.android.com/apk/res-auto

Apply Custom Attributes

Quando uma custom view criada via xml é instanciada, os atributos dela sao lidos e passados
para o construtor atraves do argumento AttributeSet. Eh possivel ler os valores direto
de AttributeSet, mas existe algumas desvantagens

1. Referencias a Resources dntro dos atributos nao sao resolvidos

2. Estilos nao sao aplicados


Ao inves da leitura direta pelo argumento AttributeSet use o metodo Context#obtainStyledAttributes
que ira retornar uma instancia de TypedArray com os valores dos recursos e estilos.

O compilador de resource andoid faz o trabalho pesado para podermos chamar o metodo
Context#obtainStyledAttributes. Para cada <declare-styleable> o arquivo R definie um array de ids
de atributos e um conjunto de constantes que cujo valor é o indce para cada elemento nesse array.

Usamos a constante predefinida para ler o atributo definido em TypedArray. Abaixo um trecho de codigo
que exemplifica o que foi explicado acima.

        // Obtem os atributos definidos na View via XML ja processados
        val styledAttrs: TypedArray? = ctx?.obtainStyledAttributes(attrs, R.styleable.ClickableView)

        //  Os atributos sao colocados em num Array e o compilador cria constantes de valor INT para
        // indicar em qual indice esta cada atributo. Cada attr criado em <declare-styleable> vira
        // um valor no array e respectivamente eh criado uma constante para indicar sua posicao nele
        // Abaixo verifico se o valor existe no array atraves da constante 'ClickableView_classCreateBehavior'
        val hasAttr = styledAttrs?.hasValue(R.styleable.ClickableView_classCreateBehavior) ?: false

        if (hasAttr) {
            // Se existe entao eu o recupero
            // como defini que o tipo eh uma string (nome completo de uma classe)
            // ja utilizo no retorno uma ext function para instanciar uma classe a partir
            // de seu nome completo: package.NomeDaClasse
            mBehavior = styledAttrs?.getString(R.styleable.ClickableView_classCreateBehavior)
                ?.fromClassNameToCreateBehavior()
        }

https://stackoverflow.com/questions/3441396/defining-custom-attrs

Resumo da melhor resposta

A tag <attr> define um atributo e ela possui dois valores: name e format.

valores que pode ser atribuidos a format

reference - if it references another resource id (e.g, "@color/my_color", "@layout/my_layout")
color
boolean
dimension
float
integer
string
fraction
enum - normally implicitly defined
flag - normally implicitly defined

<attr name="my_enum_attr">
  <enum name="value1" value="1" />
  <enum name="value2" value="2" />
</attr>

<declare-styleable name="MyCustomView">
  <attr name="my_custom_attribute" />
  <attr name="android:gravity" />
</declare-styleable>
--------------------------------------------------------------------------------------------------------------------

https://developer.android.com/training/custom-views/custom-drawing
Custom Drawing


--------------------------------------------------------------------------------------------------------------------

https://medium.com/@Zielony/guide-to-android-custom-views-attributes-ab28de3e54b7
Repositorio do autor do artigo acima: https://github.com/ZieIony/GuideToCustomViews


--------------------------------------------------------------------------------------------------------------------

Reflection Class Loader


--------------------------------------------------------------------------------------------------------------------
Custom View Components


--------------------------------------------------------------------------------------------------------------------